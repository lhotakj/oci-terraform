name: "OCI Terraform - init"
description: "A simple action creating and executing Terraform code - init"
author: lhotakj
branding:
  icon: hard-drive
  color: purple

inputs:
  terraform_version:
    description: 'Target version of Terraform, by default uses the latest'
    required: false
    default: 'latest'
  private_key:
    description: 'Content of the private key'
    required: true
  private_key_password:
    description: 'Private key password'
    required: false
  fingerprint:
    description: 'Fingerprint of your private key'
    required: true
  user_ocid:
    description: 'User OID'
    required: true
  tenancy_ocid:
    description: 'Tenancy OID'
    required: true
  compartment_ocid:
    description: 'Compartment OID'
    required: true
  region:
    description: 'Region identifier, get the list of available regions https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm. Default eu-frankfurt-1'
    required: true
  tf_state_uri:
    description: 'URL to your `terraform.tfstate` state file located in Oracle Cloud, see https://docs.oracle.com/en-us/iaas/Content/API/SDKDocs/terraformUsingObjectStore.htm'
    required: true
  ssh_public_key:
    description: 'Your SSH public key you want to use for loging, this is going to be copied to the authorized_keys to the instance'
    required: true
  ssh_private_key:
    description: "Your SSH private key required for authorizing the Ansible script, it won't be copied to the instances"
    required: true
  context:
    description: 'Folder with terraform code, by default it uses the current folder'
    required: false
    default: '.'

runs:
  using: "composite"
  steps:

    - name: "Upload SSH keys for authorization"
      shell: bash
      run: |
        mkdir -p ~/.ssh
        echo "${{ inputs.ssh_public_key }}" > ~/.ssh/id_rsa.pub
        echo "${{ inputs.ssh_private_key }}" > ~/.ssh/id_rsa
        chmod 0700 ~/.ssh
        chmod 0600 ~/.ssh/id_rsa
        chmod 0644 ~/.ssh/id_rsa.pub

    - name: "Prepare config factory ⚙️"
      shell: bash
      run: |
        PWD=$(pwd)
        echo "CONFIG_FACTORY=$PWD/config_factory.py" >> $GITHUB_ENV

    - name: "Prepare Terraform environment file ⚒️"
      working-directory: ${{ inputs.context }}
      shell: bash
      run: |
        PWD=$(pwd)
        echo "GH_ENV_FILE=$PWD/.github_env" >> $GITHUB_ENV
        touch $PWD/.github_env
        echo "export TF_VAR_private_key=\"${{ inputs.private_key }}\"" >> ${GH_ENV_FILE}
        echo "export TF_VAR_private_key_password=\"${{ inputs.private_key_password }}\"" >> ${GH_ENV_FILE}
        echo "export TF_VAR_fingerprint=\"${{ inputs.fingerprint }}\"" >> ${GH_ENV_FILE}
        echo "export TF_VAR_user_ocid=\"${{ inputs.user_ocid }}\"" >> ${GH_ENV_FILE}
        echo "export TF_VAR_tenancy_ocid=\"${{ inputs.tenancy_ocid }}\"" >> ${GH_ENV_FILE}
        echo "export TF_VAR_compartment_ocid=\"${{ inputs.compartment_ocid }}\"" >> ${GH_ENV_FILE}
        echo "export TF_VAR_region=\"${{ inputs.region }}\"" >> ${GH_ENV_FILE}
        echo "export TF_VAR_tf_state_uri=\"${{ inputs.tf_state_uri }}\"" >> ${GH_ENV_FILE}

    - name: "Save Terraform environment file 💾"
      uses: actions/upload-artifact@v3
      with:
        name: ".github_env"
        path: "${{ env.GH_ENV_FILE }}"

    - name: "Prepare secrets override Terraform file 🔐"
      working-directory: ${{ inputs.context }}
      shell: bash
      run: |
        source ${GH_ENV_FILE}        
        echo "Preparing secrets"
        python3 $CONFIG_FACTORY ./secrets_override.yaml secrets_override.tf
        cat secrets_override.tf

    - name: "Install OCI ⛏️"
      working-directory: ${{ inputs.context }}
      shell: bash
      run: |
        source ${GH_ENV_FILE}
        echo "::debug::Install Oracle OCI CLI"                
        curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh > /tmp/install.sh
        chmod +x /tmp/install.sh
        /tmp/install.sh --accept-all-defaults
        echo "::debug::Adding path to CLI to GITHUB_PATH"
        echo "${HOME}/bin" >> $GITHUB_PATH

    - name: "Test OCI 🧪"
      shell: bash
      run: |
        oci -v

    - name: "Configure OCI 👷‍♂️"
      working-directory: ${{ inputs.context }}
      shell: bash
      run: |
        source ${GH_ENV_FILE}
        echo "Preparing secrets"
        IFS=
        echo "::debug::Preparing secrets"        
        mkdir -p ${HOME}/.oci
        export TF_VAR_key_file="${HOME}/.oci/private_key.pem"
        echo "${{ inputs.private_key }}" > ${TF_VAR_key_file}
        ls -al ${HOME}/.oci
        echo "::debug::Injecting secrets"
        python3 $CONFIG_FACTORY ./config ${HOME}/.oci/config
        cat ${HOME}/.oci/config

    - name: "Install ansible ⚒️"
      shell: bash
      run: |
        echo "::debug::Install ansible"
        sudo apt update -y -q
        sudo apt install software-properties-common -y -q
        sudo apt-add-repository --yes --update ppa:ansible/ansible
        sudo apt install ansible -y -q

    - name: "Install Terraform ${{ inputs.version }} ⚒️"
      shell: bash
      run: |
        echo "::debug::Download terraform"
        mkdir -p .binary
        PWD=`pwd`
        echo "::debug::Adding path to terraform"
        echo "${PWD}/.binary" >> $GITHUB_PATH
        cd .binary
        TERRAFORM_URL=`curl -sL https://releases.hashicorp.com/terraform/index.json | jq -r '.versions[].builds[].url' | egrep -v 'rc|beta|alpha' | egrep 'linux.*amd64' | tail -1`
        wget -q -O terraform_archive.zip ${TERRAFORM_URL}
        unzip -qq -o terraform_archive.zip
        rm -rf terraform_archive.zip
        terraform -v

    - name: "Run init 🚀"
      working-directory: ${{ inputs.context }}
      shell: bash
      run: |
        source ${GH_ENV_FILE}
        terraform init

    - name: "Cleanup of secrets 🧹"
      if: failure()
      shell: bash
      run: |
        echo "::debug::Cleanup secrets"
        rm -rf ~/.ssh/id_rsa
        rm -rf ~/.ssh/id_rsa.pub

