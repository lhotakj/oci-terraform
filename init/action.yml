name: "OCI Terraform - init"
description: "A simple action creating and executing Terraform code - init"
author: lhotakj
branding:
  icon: hard-drive
  color: purple

inputs:
  terraform-version:
    description: 'Target version of Terraform, by default uses the latest'
    required: false
    default: 'latest'
  private_key:
    description: 'Content of the private key'
    required: true
  private_key_password:
    description: 'Private key password'
    required: false
  fingerprint:
    description: 'Fingerprint of your private key'
    required: true
  user_ocid:
    description: 'User OID'
    required: true
  tenancy_ocid:
    description: 'Compartment OID'
    required: true
  compartment_ocid:
    description: 'Compartment OID'
    required: true
  region:
    description: 'Region'
    required: true
  context:
    description: 'Folder with terraform code'
    required: false
    default: '.'


runs:
  using: "composite"
  steps:
  
    - name: "Create Terraform environment file"            
      working-directory: ${{ inputs.context }}
      shell: bash
      run: |
        PWD=$(pwd)
        echo '-1'
        echo "GH_ENV_FILE=$PWD/.github_env" >> $GITHUB_ENV
        echo '-2'
        echo -n "" > ${GH_ENV_FILE}
        echo '-3'
      
    - name: "Set Terraform environment file"
      shell: bash
      run: |
        env | while IFS= read -r line; do            
            value=${line#*=}            
            name=${line%%=*}            
            if [[ $name = TF_VAR_* ]]; then
                echo "export $name=\"$value\"" >> ${GH_ENV_FILE}
            fi            
        done

    - name: "Save Terraform environment file"
      uses: actions/upload-artifact@v3
      with:
        name: ".github_env"
        path: "${{ env.GH_ENV_FILE }}"
    
    
    - name: "Install OCI"
      shell: bash
      run: |
        echo "::debug::Install Oracle OCI CLI"
        curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh > /tmp/install.sh
        chmod +x /tmp/install.sh
        /tmp/install.sh --accept-all-defaults
        echo "::debug::Adding path to CLI to GITHUB_PATH"
        echo "${HOME}/bin" >> $GITHUB_PATH
        echo "Path .."
        echo "$GITHUB_PATH"

    - name: "Test OCI"
      shell: bash
      run: |        
        oci -v

    - name: "Configure OCI"
      shell: bash
      run: |
        echo "Preparing secrets"
        IFS=
        echo "::debug::Preparing secrets"        
        export TF_VAR_PRIVATE_KEY_PASSWORD="${{ inputs.private_key_password }}"
        export TF_VAR_FINGERPRINT="${{ inputs.fingerprint }}"
        export TF_VAR_USER_OCID="${{ inputs.user_ocid }}"
        export TF_VAR_COMPARTMENT_OCID="${{ inputs.compartment_ocid }}"
        export TF_VAR_TENANCY_OCID="${{ inputs.tenancy_ocid }}"
        export TF_VAR_REGION="${{ inputs.region }}"
        mkdir -p ${HOME}/.oci
        export TF_VAR_KEY_FILE="${HOME}/.oci/private_key.pem"
        echo "${{ inputs.private_key }}" > ${TF_VAR_KEY_FILE}
        ls -al ${HOME}/.oci
        echo "::debug::Injecting secrets"
        echo 'W0RFRkFVTFRdDQp1c2VyPSR7VEZfVkFSX0ZJTkdFUlBSSU5UfQ0KZmluZ2VycHJpbnQ9JHtURl9WQVJfRklOR0VSUFJJTlR9DQp0ZW5hbmN5PSR7VEZfVkFSX1RFTkFOQ1lfT0NJRH0NCnJlZ2lvbj0ke1RGX1ZBUl9SRUdJT059DQprZXlfZmlsZT0ke1RGX1ZBUl9LRVlfRklMRX0NCg==' | base64 --decode > ./config
        eval "IFS=\"\n\"; echo \"$(<./config)\"" > ./config
        mv ./config "${HOME}/.oci/"
                
    - name: "Install ansible"
      shell: bash
      run: |
        echo "::debug::Install ansible"
        sudo apt update -y -q
        sudo apt install software-properties-common -y -q
        sudo apt-add-repository --yes --update ppa:ansible/ansible
        sudo apt install ansible -y -q

    - name: "Install Terraform ${{ inputs.version }}"
      shell: bash
      run: |
        echo "::debug::Download terraform"
        mkdir -p .binary
        PWD=`pwd`
        echo "::debug::Adding path"
        echo "${PWD}/.binary" >> $GITHUB_PATH
        cd .binary
        TERRAFORM_URL=`curl -sL https://releases.hashicorp.com/terraform/index.json | jq -r '.versions[].builds[].url' | egrep -v 'rc|beta|alpha' | egrep 'linux.*amd64' | tail -1`
        wget -q -O terraform_archive.zip ${TERRAFORM_URL}
        unzip -qq -o terraform_archive.zip
        rm -rf terraform_archive.zip
        terraform -v

#    - name: "Prepare secrets"
#      shell: bash
#      run: |
#        ls -al
#        echo "Preparing secrets"
#        IFS=
#        echo "::debug::Preparing secrets"
#        export TF_VAR_PRIVATE_KEY="${{ inputs.private_key }}"
#        export TF_VAR_PRIVATE_KEY_PASSWORD="${{ inputs.private_key_password }}"
#        export TF_VAR_FINGERPRINT="${{ inputs.fingerprint }}"
#        echo "Injecting secrets"
#        cd ${{ inputs.context }}
#        echo 'Ly8gb3ZlcnJpZGUgdGVtcGxhdGUNCnByb3ZpZGVyICJvY2kiIHsNCiAgcHJpdmF0ZV9rZXkgICAgICAgICAgPSA8PEVPRg0KJFRGX1ZBUl9QUklWQVRFX0tFWQ0KRU9GDQogIHByaXZhdGVfa2V5X3Bhc3N3b3JkID0gIlwiJFRGX1ZBUl9QUklWQVRFX0tFWV9QQVNTV09SRFwiIg0KICBmaW5nZXJwcmludCAgICAgICAgICA9ICJcIiRURl9WQVJfRklOR0VSUFJJTlRcIiINCn0NCg==' | base64 --decode > secrets_override.tf
#        eval "IFS=\"\n\"; echo \"$(<secrets_override.tf)\"" > secrets_override.tf
#        cat secrets_override.tf

    - name: "Run init"
      working-directory: ${{ inputs.context }}
      shell: bash
      run: |
        terraform init
